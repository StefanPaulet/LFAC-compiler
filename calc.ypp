%{
    #include <stdio.h>
    #include <string.h>
    #include <stdlib.h>
    #include "main.h"
    extern "C" {
        yylex();
    }

    char const * stringValue;

    struct TableEntry {
        char const * name;
        char const * type;
        int invVal;
        struct TableEntry * pNext;
    };
    typedef struct TableEntry TableEntry;

    TableEntry * pFront, * pBack;

    void buildSymbolTable () {
        pFront = pBack = ( TableEntry * ) malloc ( sizeof ( TableEntry ) );
        pFront->pNext = pBack;
        pBack->pNext = NULL;
    }

    int addTableEntry ( 
        char const * type,
        char const * name 
    ) {

        if ( NULL != checkTableEntry ( name ) ) {
            yyerror ( "Variable already declared" );
            return -1;
        }

        TableEntry * pNewEntry = ( TableEntry * ) malloc ( sizeof ( TableEntry ) );

        pNewEntry->type  = strdup ( type );
        pNewEntry->name  = strdup ( name );
        pNewEntry->pNext = NULL;

        pBack->pNext = pNewEntry;
        pBack = pNewEntry;

        return 0;
    } 

    int getVarValue ( char const * name ) {

        TableEntry * pEntry = checkTableEntry ( name );
        if ( pEntry == NULL ) {
            yyerror ( "Variable not declared" );
            return -1;
        }
        return pEntry->intVal;
    }

    TableEntry * checkTableEntry ( char const * name ) {
        TableEntry * pIterator = pFront;
        while ( pFront->pNext != NULL ) {
            if ( ! strcmp ( name, pFront->name ) ) {
                return pIterator;
            }
            pFront = pFront->pNext;
        }
        return NULL;
    }   
%}

%union {
    int intValue;
    float floatValue;
    char const * stringValue;
}
    

%token <intValue> T_INT_NUMBER
%token <stringValue> ID
%type <stringValue> Declaration
%type <intValue> Expression

%left '-' '+'
%left '*' '/' 
%right UMINUS

%start Start

%%

Start:
    Declaration { printf ( "Start of declarations\n" ); }
    Expression { printf ( "Result is %d\n", $3 ); };

Expression: 
    Expression '+' Expression { $$ = $1 + $3; } |
    Expression '-' Expression { $$ = $1 - $3; } |
    Expression '*' Expression { $$ = $1 * $3; } |
    Expression '/' Expression { $$ = $1 / $3; } |
    '(' Expression ')' { $$ = $2; } |
    '-' Expression %prec UMINUS { $$ = -$2; } |
    T_INT_NUMBER { $$ = $1; } |
    ID { 
        int value = getVarValue ( $1 );
        if ( value != -1 ) {
            $$ = value;
        } 
    }

Declaration:
    ID '=' T_INT_NUMBER { addTableEntry ( "int", $1 ); }|
    {};

%%