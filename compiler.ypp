%{
    #include <iostream>
    #include "main.hpp"

    extern "C" {
        int yylex ( void );
    }  

    #include "../utilities/Scope/Scope.hpp"
    #include "../utilities/Scope/impl/Scope.hpp"
    
    Scope * pGlobalScope = new Scope ( 
            nullptr,
            nullptr,
            new TypeTable (
                new TypeTable :: TypeList {
                    new TypeEntry ( "noTypeFunctionParameter", 0 ),
                    new TypeEntry ( "char", 1 ),
                    new TypeEntry ( "bool", 1 ),
                    new TypeEntry ( "float", 4 ),
                    new TypeEntry ( "int", 4 ),
                    new TypeEntry ( "string", 8 )
                }
            )
    );

    Scope * pCurrentScope = pGlobalScope;
%}

%union {
    int intValue;
    float floatValue;
    char charValue;
    char boolValue;
    char const * stringValue;
    
#ifdef __cplusplus
    Scope * pScope;
    FunctionEntry :: ParameterList * pParamList;
    std :: list < char const * > * pStringList;
    std :: pair < char *, Scope :: TypeLength > * pArraytypePair;
#endif
}
    

%token <intValue>      T_INT_NUMBER
%token <charValue>     T_CHAR_VALUE
%token <floatValue>    T_FLOAT_NUMBER
%token <boolValue>     T_BOOL_VALUE
%token <stringValue>   T_STRING_VALUE

%token T_MAIN_IDENTIFIER
%token T_CLASS

%token <stringValue> T_TYPE
%token <stringValue> T_IDENTIFIER

%nterm <stringValue> N_MIXED_TYPE

%nterm <intValue> N_EXPRESSION
%nterm <intValue> N_CONSTANT_VALUE

%nterm <pScope> N_DECLARATION

%nterm <pScope> N_VARIABLE_DECLARATION

%nterm <pArraytypePair> N_ARRAY_SUBSCRIPT

%nterm <pScope> N_CLASS_DECLARATION
%nterm <stringValue> M_CLASS_BLOCK_BEGIN

%nterm <pScope> N_FUNCTION_DECLARATION
%nterm <pStringList> N_PARAMETER
%nterm <pStringList> N_PARAMETER_LIST

%left '-' '+'
%left '*' '/' 
%right UMINUS

%start N_START

%%

N_START:
    N_DECLARATION
    T_TYPE T_MAIN_IDENTIFIER '(' ')' '{' '}' { 
        std :: cout << "Vars:\n";
        for ( auto e : * pGlobalScope->getSymbolTable()->getSymbols() ) {
            std :: cout << e->getTypeName() << ' ' << e->getName() << '\n'; 
        }
        std :: cout << "\nType:\n";
        for ( auto e : * pGlobalScope->getTypeTable()->getTypes() ) {
            std :: cout << e->getName() << ' ' << e->getLength() << ' ' << '\n'; 
        }  
    }

N_CONSTANT_VALUE :
    T_INT_NUMBER |
    T_FLOAT_NUMBER |
    T_CHAR_VALUE |
    T_BOOL_VALUE |
    T_STRING_VALUE
    
N_MIXED_TYPE:
    T_TYPE |
    T_IDENTIFIER;

N_EXPRESSION: 
    N_EXPRESSION '+' N_EXPRESSION |
    N_EXPRESSION '-' N_EXPRESSION |
    N_EXPRESSION '*' N_EXPRESSION |
    N_EXPRESSION '/' N_EXPRESSION |
    '(' N_EXPRESSION ')' {} |
    '-' N_EXPRESSION %prec UMINUS {} |
    N_CONSTANT_VALUE |
    T_IDENTIFIER |
    T_IDENTIFIER '(' N_PARAMETER ')' { }
    

N_DECLARATION:
    N_DECLARATION N_VARIABLE_DECLARATION ';'|
    N_DECLARATION N_CLASS_DECLARATION ';' |
    N_DECLARATION N_FUNCTION_DECLARATION ';' |
    N_DECLARATION error ';' |
    ;

N_VARIABLE_DECLARATION:
    N_MIXED_TYPE T_IDENTIFIER N_ARRAY_SUBSCRIPT {
        if ( strlen ( $3->first ) != 0 ) {
            pCurrentScope->addArrayVariable ( $1, $2, $3->first, $3->second );
        }
        pCurrentScope->addVariable ( $1, $2 );
    } 

N_ARRAY_SUBSCRIPT:
    N_ARRAY_SUBSCRIPT '[' T_INT_NUMBER ']' {
        strcat ( $1->first, "A" );
        strcat ( $1->first, std :: to_string ( $3 ).c_str() );
        strcat ( $1->first, "_" );
        $$ = $1;
        $$->second *= $3;
    }
    | { 
        $$ = new std :: pair < char *, Scope :: TypeLength >;
        $$->first = new char;
        $$->second = 1;
    };

N_CLASS_DECLARATION:
    T_CLASS T_IDENTIFIER '{' 
    M_CLASS_BLOCK_BEGIN
    N_DECLARATION
    '}' {
        auto classScope = pCurrentScope;
        pCurrentScope = pCurrentScope->getUpperScope();
        auto pNewEntry = pCurrentScope->addUserDefinedType ( $2, classScope );
        if ( pNewEntry != nullptr ) {
            pCurrentScope->setUserDefinedTypeLength ( pNewEntry );
        }
    } 

M_CLASS_BLOCK_BEGIN: { 
        auto newScope = new Scope ( pCurrentScope, pGlobalScope );
        pCurrentScope = newScope; 
    }

N_FUNCTION_DECLARATION: 
    N_MIXED_TYPE T_IDENTIFIER '(' N_PARAMETER ')' {
        pCurrentScope->addFunction ( $2, $1, nullptr, $4 );
    }

N_PARAMETER:
    N_PARAMETER_LIST |
    { $$ = new std :: list < char const * >; };

N_PARAMETER_LIST:
    N_PARAMETER_LIST ',' N_MIXED_TYPE T_IDENTIFIER {
        $1->push_back ( $3 );
        $$ = $1;
    } |
    N_MIXED_TYPE T_IDENTIFIER {
        $$ = new std :: list < char const * >;
        $$->push_back( $1 );
    }



%%