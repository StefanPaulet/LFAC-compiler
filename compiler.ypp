%{
    #include <fstream>
    #include <iostream>
    #include "main.hpp"

    extern "C" {
        int yylex ( void );
    }  

    #include "../utilities/Scope/Scope.hpp"
    #include "../utilities/Scope/impl/Scope.hpp"

    #include "../utilities/AbstractSyntaxTree/AbstractSyntaxTree.hpp"
    #include "../utilities/AbstractSyntaxTree/impl/AbstractSyntaxTree.hpp"

    Scope * pCurrentScope = Scope :: pGlobalScope;
    Scope * pNonClassScope;
    std :: ofstream debugOut ( "debug.out" );

    unsigned long long int errorCount = 0;

    using StringList               = std :: list < char const * >;
    using ArraytypePair            = TypeEntry :: ArraytypePair;
    using ParameterDeclarationPair = Scope :: ParameterDeclarationPair;
    using ParameterDeclarationList = Scope :: ParameterDeclarationList;
    using IdentifierAccessPair     = std :: pair < char const *, SymbolEntry * >;
    using ParameterCallList        = FunctionEntry :: ParameterList;
    using IdentifierLookup         = std :: pair < bool, TreeNodeIdentifier * >;
    using TreeNodeLabels           = AbstractSyntaxTree :: ASTOperators;
    using BlockType                = std :: pair < Scope *, TreeNode * >;
    using ExpressionType           = std :: pair < TreeNode *, TypeEntry * >;
%}

%union {
    int intValue;
    float floatValue;
    char charValue;
    char boolValue;
    char const * stringValue;
    
#ifdef __cplusplus
    Scope * pScope;
    ParameterDeclarationList * pParamDeclarationList;
    StringList * pStringList;
    ArraytypePair * pArraytypePair;
    IdentifierLookup * pIdentifierLookup;
    ParameterCallList * pParameterCallList;
    TreeNode * pTreeNode;
    BlockType * pBlock;
    ExpressionType * pExpression;
#endif
}
    

%token <intValue>      T_INT_NUMBER
%token <charValue>     T_CHAR_VALUE
%token <floatValue>    T_FLOAT_NUMBER
%token <boolValue>     T_BOOL_VALUE
%token <stringValue>   T_STRING_VALUE

%token T_MAIN_IDENTIFIER
%token T_CLASS
%token T_IF
%token T_WHILE
%token T_FOR
%token T_CONST

%token <stringValue> T_TYPE
%token <stringValue> T_IDENTIFIER

%nterm <stringValue> N_MIXED_TYPE

%nterm <pExpression> N_CONSTANT_VALUE

%nterm <pIdentifierLookup> N_SYMBOL_ACCESS
%nterm <pIdentifierLookup> N_NON_ARRAY_SYMBOL_ACCESS
%nterm <pIdentifierLookup> N_ARRAY_SYMBOL_ACCESS

%nterm <pIdentifierLookup> N_VARIABLE_ACCESS

%nterm <pScope> M_CLASS_ACCESS_SCOPE_CHANGE
%nterm <pScope> M_PARAMETER_LOOKUP_SCOPE_CHANGE

%nterm <pParameterCallList> N_PARAMETER
%nterm <pParameterCallList> N_PARAMETER_LIST

%nterm <pExpression> N_EXPRESSION

%nterm <pTreeNode> N_BOOL_EXPRESSION

%nterm <pTreeNode> N_DECLARATION
%nterm <pTreeNode> N_BLOCK_SCOPE_DECLARATION
%nterm <pTreeNode> N_VARIABLE_DECLARATION
%nterm <pTreeNode> N_VARIABLE_DEFINITION

%nterm <pArraytypePair> N_ARRAY_SUBSCRIPT

%nterm <pTreeNode> N_CLASS_DECLARATION
%nterm <pTreeNode> M_BLOCK_BEGIN

%nterm <pTreeNode> N_FUNCTION_DECLARATION
%nterm <pScope> M_FUNCTION_DECLARATION_BLOCK_BEGIN
%nterm <pBlock> N_FUNCTION_BLOCK
%nterm <pParamDeclarationList> N_PARAMETER_DECLARATION
%nterm <pParamDeclarationList> N_PARAMETER_DECLARATION_LIST

%nterm <pBlock> N_BLOCK
%nterm <pTreeNode> N_STATEMENT

%nterm <pTreeNode> N_ASSIGNMENT
%nterm <pTreeNode> N_IF_STATEMENT
%nterm <pTreeNode> N_WHILE_STATEMENT
%nterm <pTreeNode> N_FOR_STATEMENT

%left T_BAND
%left T_BOR
%right UNOT


%left '-' '+'
%left '*' '/' 
%right UMINUS


%start N_START

%%

N_START:
    N_DECLARATION
    T_TYPE T_MAIN_IDENTIFIER '(' ')' N_BLOCK {
        
        std :: cout << "Error count: " << errorCount << '\n';
        if ( errorCount == 0 ) {
            auto pTree = new AbstractSyntaxTree ( $1, $6->second );
            pTree->eval();
        }
    }

N_CONSTANT_VALUE:
    T_INT_NUMBER {
        $$ = new ExpressionType (
                new TreeNodeConstant ( 
                    TreeNodeConstant :: ValueType :: __INT, 
                    $1 
                ),
                Scope :: pGlobalScope->getTypeTable()->getType ( "int" )
        );
    } |
    T_FLOAT_NUMBER { 
        $$ = new ExpressionType (
                new TreeNodeConstant ( 
                    TreeNodeConstant :: ValueType :: __FLOAT, 
                    $1 
                ),
                Scope :: pGlobalScope->getTypeTable()->getType ( "float" )
        );
    } |
    T_CHAR_VALUE { 
        $$ = new ExpressionType (
                new TreeNodeConstant ( 
                    TreeNodeConstant :: ValueType :: __CHAR, 
                    $1 
                ),
                Scope :: pGlobalScope->getTypeTable()->getType ( "char" )
        );
    } |
    T_BOOL_VALUE { 
        $$ = new ExpressionType (
                new TreeNodeConstant ( 
                    TreeNodeConstant :: ValueType :: __BOOL, 
                    $1 
                ),
                Scope :: pGlobalScope->getTypeTable()->getType ( "bool" )
        );
    } |
    T_STRING_VALUE { 
        $$ = new ExpressionType (
                new TreeNodeConstant ( 
                    TreeNodeConstant :: ValueType :: __STRING, 
                    $1 
                ),
                Scope :: pGlobalScope->getTypeTable()->getType ( "string" )
        );
    }

N_SYMBOL_ACCESS:
    N_NON_ARRAY_SYMBOL_ACCESS |
    N_ARRAY_SYMBOL_ACCESS

N_NON_ARRAY_SYMBOL_ACCESS:
    N_SYMBOL_ACCESS M_PARAMETER_LOOKUP_SCOPE_CHANGE '(' N_PARAMETER ')' {

        if ( pCurrentScope != nullptr ) {
            if ( ! $1->first && $1->second->getSymbol()->getType() != nullptr ) {
                auto pFunction = dynamic_cast < FunctionEntry * > ( $1->second->getSymbol() );
                if ( pFunction == nullptr ) {
                    $1->first = true;
                    error :: nonFunctionCallError ( $1->second->getSymbol()->getName() );
                } else {
                    if ( pFunction->matchParameterCallList ( $4 ) ) {
                        $1->second->setLabel ( TreeNodeLabels :: __CALL );
                        TreeNode * * pFunctionChildList = new TreeNode * [ $4->size() + 1 ];
                        unsigned short int i = 0;
                        pFunctionChildList [ i++ ] = new TreeNodeIdentifier ( TreeNodeLabels :: __VAR, pFunction );
                        for ( auto e : * $4 ) {
                            pFunctionChildList [ i++ ] = new TreeNodeIdentifier ( TreeNodeLabels :: __VAR, e );
                        }
                        $1->second->setChildList ( pFunctionChildList );
                        $1->second->setSymbol ( pFunction->getScope()->getSymbolTable()->lookUpSymbol("$return" ) );
                    } else {
                        $1->first = true;
                    }
                }
            }
        }
        $$ = $1;
        pCurrentScope = $2;
    } |
    T_IDENTIFIER {

        if ( pCurrentScope != nullptr ) {
            auto pSymbol = pCurrentScope->getSymbol ( $1 );
            if ( pSymbol == nullptr ) {
                $$ = new IdentifierLookup ( 
                    false, 
                    new TreeNodeIdentifier ( 
                        TreeNodeLabels :: __VAR,
                        new VariableEntry ( $1, nullptr ) 
                    )
                );
            } else {
                $$ = new IdentifierLookup ( 
                    false, 
                    new TreeNodeIdentifier ( 
                        TreeNodeLabels :: __VAR,
                        pSymbol
                    )
                );
            }
        } else {
            $$ = new IdentifierLookup ( 
                    false, 
                    new TreeNodeIdentifier ( 
                        TreeNodeLabels :: __VAR,
                        new VariableEntry ( $1, nullptr ) 
                    )
                );
        }
    }

M_PARAMETER_LOOKUP_SCOPE_CHANGE:
    { $$ = pCurrentScope; pCurrentScope = pNonClassScope; }

N_ARRAY_SYMBOL_ACCESS:
    N_NON_ARRAY_SYMBOL_ACCESS N_ARRAY_SUBSCRIPT {

        if ( ! $1->first ) {
            auto pSymbol = $1->second->getSymbol();
            auto pType = pSymbol->getType();
            if ( pType != nullptr ) {
                if ( pType->getName()[0] != 'A' ) {
                    $1->first = true;
                    error :: nonArrayTypeArrayAccess ( pSymbol->getName() );
                } else {
                    int accessedElement = pType->matchArraySubscript ( $2 );
                    if ( accessedElement ) {
                        $1->second->setSymbol ( ( reinterpret_cast < VariableEntry * > ( pSymbol ) )->getValue().arrayValue[ accessedElement ] );
                    } else {
                        $1->first = true;
                    }
                }
            }
        }
        $$ = $1;
    }

N_VARIABLE_ACCESS:
    N_VARIABLE_ACCESS M_CLASS_ACCESS_SCOPE_CHANGE {
        if ( ! $1->first ) {
            std :: string typeName = $1->second->getSymbol()->getTypeName();
            if ( typeName[0] < '0' || typeName[0] > '9' ) {
                error :: nonStructureType ( typeName.c_str() );
                $1->first = true;
                pCurrentScope = nullptr;
            } else {
                pCurrentScope = ( reinterpret_cast < VariableEntry * > ( $1->second->getSymbol() ) )->getValue().structValue;
            }
        } else {
            pCurrentScope = nullptr;
        }
    } '.' N_SYMBOL_ACCESS { 
        if ( pCurrentScope != nullptr ) {
            if ( $5->second->getSymbol()->getType() == nullptr ) {
                $5->first = true;
                error :: nonExistentMember ( $1->second->getSymbol()->getTypeName().c_str(), $5->second->getSymbol()->getName() );
            } else {
                $5->second->setSymbol ( ( reinterpret_cast < VariableEntry * > ( $1->second->getSymbol() ) )->getValue().structValue->getSymbolTable()->lookUpSymbol ( $5->second->getSymbol()->getName() ) );
            }
        } 
        pCurrentScope = $2;
        $$ = $5;
    } |
    N_SYMBOL_ACCESS {
        if ( ! $1->first ) {
            if ( $1->second->getSymbol()->getType() == nullptr ) {
                $1->first = true;
                error :: undeclaredSymbol ( $1->second->getSymbol()->getName() );
            }
        }
        $$ = $1;
    }

M_CLASS_ACCESS_SCOPE_CHANGE:
    { $$ = pCurrentScope; }

N_PARAMETER:
    N_PARAMETER_LIST {
        $$ = $1;
    }|
    { $$ = new ParameterCallList; };

N_PARAMETER_LIST:
    N_PARAMETER_LIST ',' N_SYMBOL_ACCESS {
        $1->push_back ( $3->second->getSymbol() );
        $$ = $1;
    } |
    N_SYMBOL_ACCESS {
        $$ = new ParameterCallList;
        $$->push_back ( $1->second->getSymbol() );
    }

    
N_MIXED_TYPE:
    T_TYPE |
    T_IDENTIFIER;

N_EXPRESSION: 
    N_EXPRESSION '+' N_EXPRESSION {
        if ( $1->second != nullptr && $3->second != nullptr ) {
            if ( $1->second != $3->second ) {
                error :: mismatchedTypes ( $1->second->getName(), $3->second->getName() );
            }
        }
        TreeNode ** pChildren = new TreeNode * [2];
        pChildren[0] = $1->first;
        pChildren[1] = $3->first;
        $$ = new ExpressionType {
            new TreeNode ( TreeNodeLabels :: __PLUS, 2, pChildren ),
            $3->second
        };
    } |
    N_EXPRESSION '-' N_EXPRESSION {
        if ( $1->second != nullptr && $3->second != nullptr ) {
            if ( $1->second != $3->second ) {
                error :: mismatchedTypes ( $1->second->getName(), $3->second->getName() );
            }
        }
        TreeNode ** pChildren = new TreeNode * [2];
        pChildren[0] = $1->first;
        pChildren[1] = $3->first;
        $$ = new ExpressionType {
            new TreeNode ( TreeNodeLabels :: __MINUS, 2, pChildren ),
            $3->second
        };
    } |
    N_EXPRESSION '*' N_EXPRESSION {
        if ( $1->second != nullptr && $3->second != nullptr ) {
            if ( $1->second != $3->second ) {
                error :: mismatchedTypes ( $1->second->getName(), $3->second->getName() );
            }
        }
        TreeNode ** pChildren = new TreeNode * [2];
        pChildren[0] = $1->first;
        pChildren[1] = $3->first;
        $$ = new ExpressionType {
            new TreeNode ( TreeNodeLabels :: __MUL, 2, pChildren ),
            $3->second
        };
    } |
    N_EXPRESSION '/' N_EXPRESSION {
        if ( $1->second != nullptr && $3->second != nullptr ) {
            if ( $1->second != $3->second ) {
                error :: mismatchedTypes ( $1->second->getName(), $3->second->getName() );
            }
        }
        TreeNode ** pChildren = new TreeNode * [2];
        pChildren[0] = $1->first;
        pChildren[1] = $3->first;
        $$ = new ExpressionType {
            new TreeNode ( TreeNodeLabels :: __DIV, 2, pChildren ),
            $3->second
        };
    } |
    '(' N_EXPRESSION ')' { $$ = $2; } |
    '-' N_EXPRESSION %prec UMINUS { 
        TreeNode ** pChild = new TreeNode *;
        (*pChild) = $2->first;
        $$ = new ExpressionType {
            new TreeNode ( TreeNodeLabels :: __UMINUS, 1, pChild ),
            $2->second
        };
    } |
    N_CONSTANT_VALUE |
    N_VARIABLE_ACCESS { $$ = new ExpressionType ( $1->second, $1->second->getSymbol()->getType() ); }

N_BOOL_EXPRESSION:
    N_BOOL_EXPRESSION T_BAND N_BOOL_EXPRESSION |
    N_BOOL_EXPRESSION T_BOR N_BOOL_EXPRESSION |
    '!' N_BOOL_EXPRESSION %prec UNOT { }| 
    N_CONSTANT_VALUE { } |
    N_VARIABLE_ACCESS { }
    

N_DECLARATION:
    N_DECLARATION N_FUNCTION_DECLARATION {
        TreeNode ** pChildren = new TreeNode * [2];
        pChildren[0] = $1;
        pChildren[1] = $2;
        $$ = new TreeNode ( TreeNodeLabels :: __STMT, 2, pChildren );
    } |
    N_DECLARATION N_BLOCK_SCOPE_DECLARATION ';' { 
        TreeNode ** pChildren = new TreeNode * [2];
        pChildren[0] = $1;
        pChildren[1] = $2;
        $$ = new TreeNode ( TreeNodeLabels :: __STMT, 2, pChildren );
    }|
    N_DECLARATION error ';' { ++ errorCount; $$ = $1; } |
    { $$ = new TreeNode ( TreeNodeLabels :: __STMT, 0, nullptr ); };


N_BLOCK_SCOPE_DECLARATION:
    N_CLASS_DECLARATION |
    N_VARIABLE_DECLARATION |
    N_VARIABLE_DEFINITION


N_VARIABLE_DECLARATION:
    N_MIXED_TYPE T_IDENTIFIER {
        pCurrentScope->addVariable ( $1, $2 );
        $$ = new TreeNode ( TreeNodeLabels :: __STMT, 0, nullptr );
    } |
    N_MIXED_TYPE T_CONST T_IDENTIFIER {
        error :: unitializedConstIdentifier();
        $$ = new TreeNode ( TreeNodeLabels :: __STMT, 0, nullptr );
    } |
    N_MIXED_TYPE T_IDENTIFIER N_ARRAY_SUBSCRIPT {
        pCurrentScope->addArrayVariable ( $1, $2, $3->first, $3->second );
        $$ = new TreeNode ( TreeNodeLabels :: __STMT, 0, nullptr );
    } |
    N_MIXED_TYPE T_CONST T_IDENTIFIER N_ARRAY_SUBSCRIPT {
        error :: unitializedConstIdentifier();
        $$ = new TreeNode ( TreeNodeLabels :: __STMT, 0, nullptr );
    }

N_VARIABLE_DEFINITION:
    N_MIXED_TYPE T_IDENTIFIER '=' N_EXPRESSION {
        auto pNewVariable = pCurrentScope->addVariable ( $1, $2 );
        if ( pNewVariable != nullptr && $4->second != nullptr ) {
            if ( pNewVariable->getType() != $4->second ) {
                error :: assignmentMismatchedTypes ( pNewVariable->getType()->getName(), $4->second->getName() );
            }
        }
        TreeNode ** pChildren = new TreeNode * [2];
        pChildren[0] = new TreeNodeIdentifier ( TreeNodeLabels :: __VAR, pNewVariable );
        pChildren[1] = $4->first;
        $$ = new TreeNode ( TreeNodeLabels :: __ASG, 2, pChildren );
    } |
    N_MIXED_TYPE T_CONST T_IDENTIFIER '=' N_EXPRESSION {
        auto pNewVariable = pCurrentScope->addVariable ( $1, $3 );
        pNewVariable->setConstQualifier ( true );
        if ( pNewVariable != nullptr && $5->second != nullptr ) {
            if ( pNewVariable->getType() != $5->second ) {
                error :: assignmentMismatchedTypes ( pNewVariable->getType()->getName(), $5->second->getName() );
            }
        }
        TreeNode ** pChildren = new TreeNode * [2];
        pChildren[0] = new TreeNodeIdentifier ( TreeNodeLabels :: __VAR, pNewVariable );
        pChildren[1] = $5->first;
        $$ = new TreeNode ( TreeNodeLabels :: __ASG, 2, pChildren );
    }

N_ARRAY_SUBSCRIPT:
    '[' T_INT_NUMBER ']' N_ARRAY_SUBSCRIPT {
        char * pAux = new char;
        sprintf ( pAux, "A%d_", $2 );
        strcat ( pAux, $4->first );
        $$ = new ArraytypePair;
        $$->first = pAux;
        $$->second = $4->second * $2;
    } |
    '[' T_INT_NUMBER ']' { 
        $$ = new ArraytypePair;
        $$->first = new char;
        sprintf ( $$->first, "A%d_", $2 );
        $$->second = $2;
    };


N_CLASS_DECLARATION:
    T_CLASS T_IDENTIFIER '{' 
    M_BLOCK_BEGIN
    N_DECLARATION
    '}' {
        auto classScope = pCurrentScope;
        pCurrentScope = pCurrentScope->getUpperScope();
        auto pNewEntry = pCurrentScope->addUserDefinedType ( $2, classScope );
        if ( pNewEntry != nullptr ) {
            pCurrentScope->setUserDefinedTypeLength ( pNewEntry );
        }
        $$ = new TreeNode ( TreeNodeLabels :: __STMT, 0, nullptr );
    } 


M_BLOCK_BEGIN: { 
        auto newScope = new Scope ( pCurrentScope );
        pCurrentScope = pNonClassScope = newScope; 
    }


N_FUNCTION_DECLARATION: 
    N_MIXED_TYPE T_IDENTIFIER '(' N_PARAMETER_DECLARATION M_FUNCTION_DECLARATION_BLOCK_BEGIN ')' { 
        $5->addFunction ( $2, $1, nullptr, $4, pCurrentScope );
    } N_FUNCTION_BLOCK {
        pCurrentScope = $5;
        auto pSymbol = pCurrentScope->getSymbolTable()->lookUpSymbol ( $2 );
        ( reinterpret_cast < FunctionEntry * > ( pSymbol ) )->setFunctionBody ( $8->second );
        $$ = new TreeNodeIdentifier ( TreeNodeLabels :: __FUNC, pSymbol );
    } |
    N_MIXED_TYPE T_IDENTIFIER '(' N_PARAMETER_DECLARATION M_FUNCTION_DECLARATION_BLOCK_BEGIN ')' {
        error :: functionDeclaration();
        delete pCurrentScope;
        pCurrentScope = $5;
    }
M_FUNCTION_DECLARATION_BLOCK_BEGIN: {
    $$ = pCurrentScope;
    auto pNewScope = new Scope ( pCurrentScope );
    pCurrentScope = pNewScope;
    }
N_FUNCTION_BLOCK: 
    '{' N_STATEMENT '}' {
        $$ = new BlockType ( pCurrentScope, $2 );
    }   

N_PARAMETER_DECLARATION:
    N_PARAMETER_DECLARATION_LIST |
    { $$ = new ParameterDeclarationList; };


N_PARAMETER_DECLARATION_LIST:
    N_PARAMETER_DECLARATION_LIST ',' N_MIXED_TYPE T_IDENTIFIER {
        $1->push_back ( new ParameterDeclarationPair { $3, $4 } );
        $$ = $1;
    } |
    N_MIXED_TYPE T_IDENTIFIER {
        $$ = new ParameterDeclarationList;
        $$->push_back( new ParameterDeclarationPair { $1, $2 } );
    }


N_BLOCK: '{' M_BLOCK_BEGIN N_STATEMENT '}' {
        $$ = new BlockType ( pCurrentScope, $3 );
        // debugOut << "Scope: " << pCurrentScope << '\n' << "With variables:\n";
        // for ( auto e : * pCurrentScope->getSymbolTable()->getSymbols() ) {
        //     debugOut << e << ' ' << e->getTypeName() << ' ' << e->getName();
        //     auto pVar = dynamic_cast < VariableEntry * > ( e );
        //     if ( pVar != nullptr ) {
        //         if ( * pVar->getType()->getName() >= '0' && * pVar->getType()->getName() <= '9' ) {
        //             debugOut << '\n';
        //             for ( auto f : * pVar->getValue().structValue->getSymbolTable()->getSymbols() ) {
        //                 debugOut << f->getTypeName() << ' ' << f->getName();
        //             }
        //         } else {
        //             debugOut << " with value " << pVar->getValue().intValue << '\n';
        //         }
        //     } else {
        //         debugOut << '\n';
        //     }
        // }
        // debugOut << "And types:\n";
        // for ( auto e : * pCurrentScope->getTypeTable()->getTypes() ) {
        //     debugOut << e->getName() << ' ' << e->getLength() << '\n';
        // }
        // debugOut << '\n';
        pCurrentScope = pCurrentScope->getUpperScope();
    }


N_STATEMENT:
    N_STATEMENT N_ASSIGNMENT ';' {
        TreeNode ** pChildren = new TreeNode * [2];
        pChildren[0] = $1;
        pChildren[1] = $2;
        $$ = new TreeNode ( TreeNodeLabels :: __STMT, 2, pChildren );
    } |
    N_STATEMENT N_IF_STATEMENT |
    N_STATEMENT N_WHILE_STATEMENT |
    N_STATEMENT N_FOR_STATEMENT |
    N_STATEMENT N_EXPRESSION ';' {
        TreeNode ** pChildren = new TreeNode * [2];
        pChildren[0] = $1;
        pChildren[1] = $2->first;
        $$ = new TreeNode ( TreeNodeLabels :: __STMT, 2, pChildren );
    } |
    N_STATEMENT N_BLOCK_SCOPE_DECLARATION ';' {
        TreeNode ** pChildren = new TreeNode * [2];
        pChildren[0] = $1;
        pChildren[1] = $2;
        $$ = new TreeNode ( TreeNodeLabels :: __STMT, 2, pChildren ); 
    } |
    N_STATEMENT error ';' { ++ errorCount; }|
    N_STATEMENT N_BLOCK {
        TreeNode ** pChildren = new TreeNode * [2];
        pChildren[0] = $1;
        pChildren[1] = $2->second;
        $$ = new TreeNode ( TreeNodeLabels :: __STMT, 2, pChildren );
    } |
    { $$ = new TreeNode ( TreeNodeLabels :: __STMT, 0, nullptr ); };


N_ASSIGNMENT:
    N_VARIABLE_ACCESS '=' N_EXPRESSION {
        if ( reinterpret_cast < VariableEntry * > ( $1->second->getSymbol() )->getConstQualifier() )  {
            error :: constIdentifierAssigned ( $1->second->getSymbol()->getName() );
        }
        if ( $1->second->getSymbol()->getType() != nullptr && $3->second != nullptr ) {
            if ( $1->second->getSymbol()->getType() != $3->second ) {
                error :: assignmentMismatchedTypes ( $1->second->getSymbol()->getType()->getName(), $3->second->getName() );
            }
        }
        TreeNode ** pChildren = new TreeNode * [2];
        pChildren[0] = $1->second;
        pChildren[1] = $3->first;
        $$ = new TreeNode ( TreeNodeLabels :: __ASG, 2, pChildren );
    }


N_IF_STATEMENT:
    T_IF '(' N_BOOL_EXPRESSION ')' N_BLOCK { }


N_WHILE_STATEMENT:
    T_WHILE '(' N_BOOL_EXPRESSION ')' N_BLOCK { }


N_FOR_STATEMENT:
    T_FOR '(' ',' ',' ')' N_BLOCK { }

%%